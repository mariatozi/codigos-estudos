{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mariatozi/codigos-estudos/blob/main/Ol%C3%A1%2C_este_%C3%A9_o_Colaboratory.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import openpyxl"
      ],
      "metadata": {
        "id": "vnIs2qXpLJoF"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_excel('InfoNovo.xlsx')\n",
        "workbook = openpyxl.load_workbook('InfoNovo.xlsx')\n",
        "sheet = workbook.active\n",
        "# Ou você pode escolher uma planilha específica: workbook['NomeDaPlanilha']\n"
      ],
      "metadata": {
        "id": "JlqGrb47LP6z"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 310
        },
        "id": "me9yspD1LXf-",
        "outputId": "aab17c52-1697-4725-93e7-57e8d6106fea"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0   Problema     Mês                   Colaborador  \\\n",
              "0           0 2023-08-02  agosto   Vivian Teixeira de Oliveira   \n",
              "1           1 2023-08-02  agosto   Vivian Teixeira de Oliveira   \n",
              "2           2 2023-08-02  agosto   Vivian Teixeira de Oliveira   \n",
              "3           3 2023-08-02  agosto       ALENE XAVIER DOS SANTOS   \n",
              "4           4 2023-08-02  agosto       ALENE XAVIER DOS SANTOS   \n",
              "\n",
              "     Colaborador-nome-ajustado                         Equipe  \\\n",
              "0  Vivian Teixeira de Oliveira  Carmem Lapa - Plantao Noturno   \n",
              "1  Vivian Teixeira de Oliveira  Carmem Lapa - Plantao Noturno   \n",
              "2  Vivian Teixeira de Oliveira  Carmem Lapa - Plantao Noturno   \n",
              "3      ALENE XAVIER DOS SANTOS     Natalia Lima- SAS/ Allianz   \n",
              "4      ALENE XAVIER DOS SANTOS     Natalia Lima- SAS/ Allianz   \n",
              "\n",
              "                                           Descrição  \\\n",
              "0                                   Queda de ligação   \n",
              "1                                   Queda de ligação   \n",
              "2                                   Queda de ligação   \n",
              "3  Ligação muda (entrou muda no início do atendim...   \n",
              "4                                   Queda de ligação   \n",
              "\n",
              "                                        Desc-tratado  \n",
              "0  Ligações que tiveram queda (durante ou na fina...  \n",
              "1  Ligações que tiveram queda (durante ou na fina...  \n",
              "2  Ligações que tiveram queda (durante ou na fina...  \n",
              "3  Falha nas ligações que ocorreram durante o ate...  \n",
              "4  Ligações que tiveram queda (durante ou na fina...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6a9f9626-009d-4f44-8ef6-929255cd99ff\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Problema</th>\n",
              "      <th>Mês</th>\n",
              "      <th>Colaborador</th>\n",
              "      <th>Colaborador-nome-ajustado</th>\n",
              "      <th>Equipe</th>\n",
              "      <th>Descrição</th>\n",
              "      <th>Desc-tratado</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>2023-08-02</td>\n",
              "      <td>agosto</td>\n",
              "      <td>Vivian Teixeira de Oliveira</td>\n",
              "      <td>Vivian Teixeira de Oliveira</td>\n",
              "      <td>Carmem Lapa - Plantao Noturno</td>\n",
              "      <td>Queda de ligação</td>\n",
              "      <td>Ligações que tiveram queda (durante ou na fina...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>2023-08-02</td>\n",
              "      <td>agosto</td>\n",
              "      <td>Vivian Teixeira de Oliveira</td>\n",
              "      <td>Vivian Teixeira de Oliveira</td>\n",
              "      <td>Carmem Lapa - Plantao Noturno</td>\n",
              "      <td>Queda de ligação</td>\n",
              "      <td>Ligações que tiveram queda (durante ou na fina...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>2023-08-02</td>\n",
              "      <td>agosto</td>\n",
              "      <td>Vivian Teixeira de Oliveira</td>\n",
              "      <td>Vivian Teixeira de Oliveira</td>\n",
              "      <td>Carmem Lapa - Plantao Noturno</td>\n",
              "      <td>Queda de ligação</td>\n",
              "      <td>Ligações que tiveram queda (durante ou na fina...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>2023-08-02</td>\n",
              "      <td>agosto</td>\n",
              "      <td>ALENE XAVIER DOS SANTOS</td>\n",
              "      <td>ALENE XAVIER DOS SANTOS</td>\n",
              "      <td>Natalia Lima- SAS/ Allianz</td>\n",
              "      <td>Ligação muda (entrou muda no início do atendim...</td>\n",
              "      <td>Falha nas ligações que ocorreram durante o ate...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>2023-08-02</td>\n",
              "      <td>agosto</td>\n",
              "      <td>ALENE XAVIER DOS SANTOS</td>\n",
              "      <td>ALENE XAVIER DOS SANTOS</td>\n",
              "      <td>Natalia Lima- SAS/ Allianz</td>\n",
              "      <td>Queda de ligação</td>\n",
              "      <td>Ligações que tiveram queda (durante ou na fina...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6a9f9626-009d-4f44-8ef6-929255cd99ff')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6a9f9626-009d-4f44-8ef6-929255cd99ff button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6a9f9626-009d-4f44-8ef6-929255cd99ff');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-32e4073f-31bd-48fc-b5ff-7cc10196dc69\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-32e4073f-31bd-48fc-b5ff-7cc10196dc69')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-32e4073f-31bd-48fc-b5ff-7cc10196dc69 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "contagem_valores = df['Desc-tratado'].value_counts()\n",
        "print(contagem_valores)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uqLaRujsLaFO",
        "outputId": "2d03ec8c-e870-4479-9173-63937349ff09"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ligações que tiveram queda (durante ou na finalização)                      1237\n",
            "Ligações mudas e/ou sem retorno de voz                                       496\n",
            "Fluxo falha pesquisa de satisfação                                           101\n",
            "Fluxo de sistemas ou telefonia                                                71\n",
            "Queda de energia/internet                                                     18\n",
            "Falha nas ligações que ocorreram durante o atendimento (mudas ou caindo)      11\n",
            "Falhas nos itens físicos ou Falhas HomeBased                                   9\n",
            "Sem informação                                                                 6\n",
            "Ligações com falhas/ruídos ou não completam                                    5\n",
            "Abandono ou desconexão realizada em linha pelo cliente                         5\n",
            "Falhas Home Based - Sistemas                                                   5\n",
            "Ligações que ficaram mudas e cairam direto                                     4\n",
            "Falha nas ligações ao entrar na URA - Comportamento Call Center                3\n",
            "Name: Desc-tratado, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Carregar o arquivo Excel em um DataFrame\n",
        "caminho_arquivo = 'InfoNovo.xlsx'\n",
        "df = pd.read_excel(caminho_arquivo)\n",
        "\n",
        "# Selecionar a coluna com informações ofensivas\n",
        "coluna_ofensiva = 'Desc-tratado'  # Substitua pelo nome da coluna com informações ofensivas\n",
        "df_ofensas = df[coluna_ofensiva]\n",
        "\n",
        "# Contar a frequência das informações ofensivas\n",
        "contagem_ofensas = df_ofensas.value_counts().head(5)\n",
        "\n",
        "cores_personalizadas = ['#184e77', '#1e6091', '#1a759f', '#168aad', '#34a0a4']\n",
        "\n",
        "# Criar um gráfico de barras horizontais para os 10 registros mais ofensores\n",
        "plt.figure(figsize=(10, 6))\n",
        "ax = contagem_ofensas.sort_values().plot(kind='barh', color=cores_personalizadas)\n",
        "plt.ylabel('Registros')\n",
        "plt.title('Ofensores Julho')\n",
        "\n",
        "# Adicionar rótulos de dados nas barras do gráfico\n",
        "ax.bar_label(ax.containers[0])\n",
        "\n",
        "plt.gca().invert_yaxis()  # Inverter o eixo y para ter o maior valor no topo\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "aSieTCBfLnCt",
        "outputId": "a8971d11-97ca-42b2-ce2f-b052a1b71912"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def substituir_valor(texto):\n",
        "  if texto in ['Ligações mudas e/ou sem retorno de voz']:\n",
        "    return 'Falhas operacionais'\n",
        "\n",
        "  elif texto in ['Fluxo de sistemas ou telefonia',\n",
        "                 'Fluxo falha pesquisa de satisfação',\n",
        "                 'Falhas Home Based - Sistemas',\n",
        "                 'Ligações com falhas/ruídos ou não completam']:\n",
        "    return 'Fluxo indevido - S&T'\n",
        "\n",
        "  elif texto in ['Falha nas ligações ao entrar na URA - Comportamento Call Center']:\n",
        "    return 'Comportamento call center - Operacional'\n",
        "\n",
        "  elif texto in ['Queda de energia/internet']:\n",
        "    return 'Fluxo patrimônio ou service desk'\n",
        "\n",
        "  elif texto in ['Falhas nos itens físicos ou Falhas HomeBased']:\n",
        "    return 'Fluxo patrimônio'\n",
        "\n",
        "  elif texto in ['Sem informação']:\n",
        "    return 'Reorientação liderança'\n",
        "\n",
        "  elif texto in ['Abandono ou desconexão realizada em linha pelo cliente']:\n",
        "    return 'Seguir orientações operacionais e procedimento'\n",
        "\n",
        "  else:\n",
        "    return 'Não se aplicam as segmentações'"
      ],
      "metadata": {
        "id": "RD3o4dpWL0Xf"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Ligações que tiveram queda (durante ou na finalização)                      1237\n",
        "# ---Ligações mudas e/ou sem retorno de voz                                       496\n",
        "# ---Fluxo falha pesquisa de satisfação                                           101\n",
        "# ---Fluxo de sistemas ou telefonia                                                71\n",
        "# ---Queda de energia/internet                                                     18\n",
        "# Falha nas ligações que ocorreram durante o atendimento (mudas ou caindo)      11\n",
        "# ---Falhas nos itens físicos ou Falhas HomeBased                                   9\n",
        "# ---Sem informação                                                                 6\n",
        "# ---Ligações com falhas/ruídos ou não completam                                    5\n",
        "# ---Abandono ou desconexão realizada em linha pelo cliente                         5\n",
        "# ---Falhas Home Based - Sistemas                                                   5\n",
        "# Ligações que ficaram mudas e cairam direto                                     4\n",
        "# ---Falha nas ligações ao entrar na URA - Comportamento Call Center                3"
      ],
      "metadata": {
        "id": "1fRmOwO9QDgl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Defina o título da nova coluna\n",
        "new_column_title = 'Dados-segmentados'\n",
        "sheet['C1'] = new_column_title\n",
        "\n",
        "# Preencha os valores na nova coluna\n",
        "for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row):  # Comece da segunda linha\n",
        "    cell = row[2]  # Acessa a terceira coluna (coluna \"C\")\n",
        "    cell.value = \"Dados-segmentados\"  # Defina o valor que você deseja\n"
      ],
      "metadata": {
        "id": "lez7pDm4OpuF"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['Dados-segmentados'] = df['Desc-tratado'].apply(substituir_valor)"
      ],
      "metadata": {
        "id": "rf1judz0OVIU"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 615
        },
        "id": "Q15gAY4qOApE",
        "outputId": "f4ae835c-f267-4644-b47c-e7405e644ee1"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Unnamed: 0   Problema     Mês                            Colaborador  \\\n",
              "0              0 2023-08-02  agosto            Vivian Teixeira de Oliveira   \n",
              "1              1 2023-08-02  agosto            Vivian Teixeira de Oliveira   \n",
              "2              2 2023-08-02  agosto            Vivian Teixeira de Oliveira   \n",
              "3              3 2023-08-02  agosto                ALENE XAVIER DOS SANTOS   \n",
              "4              4 2023-08-02  agosto                ALENE XAVIER DOS SANTOS   \n",
              "...          ...        ...     ...                                    ...   \n",
              "1966        1966 2023-08-23  agosto             JAMILA LAYZA BATISTA SILVA   \n",
              "1967        1967 2023-08-23  agosto             JAMILA LAYZA BATISTA SILVA   \n",
              "1968        1968 2023-08-23  agosto               RAYXA KHELLY UCELI NEVES   \n",
              "1969        1969 2023-08-23  agosto  JHENIFER GABRIELA DOS SANTOS DAMACENO   \n",
              "1970        1970 2023-08-23  agosto                       LAIS SILVA COSTA   \n",
              "\n",
              "                  Colaborador-nome-ajustado                         Equipe  \\\n",
              "0               Vivian Teixeira de Oliveira  Carmem Lapa - Plantao Noturno   \n",
              "1               Vivian Teixeira de Oliveira  Carmem Lapa - Plantao Noturno   \n",
              "2               Vivian Teixeira de Oliveira  Carmem Lapa - Plantao Noturno   \n",
              "3                   ALENE XAVIER DOS SANTOS     Natalia Lima- SAS/ Allianz   \n",
              "4                   ALENE XAVIER DOS SANTOS     Natalia Lima- SAS/ Allianz   \n",
              "...                                     ...                            ...   \n",
              "1966             JAMILA LAYZA BATISTA SILVA        Anne Santos - BB/Mapfre   \n",
              "1967             JAMILA LAYZA BATISTA SILVA        Anne Santos - BB/Mapfre   \n",
              "1968               RAYXA KHELLY UCELI NEVES        Anne Santos - BB/Mapfre   \n",
              "1969  JHENIFER GABRIELA DOS SANTOS DAMACENO        Anne Santos - BB/Mapfre   \n",
              "1970                       LAIS SILVA COSTA        Anne Santos - BB/Mapfre   \n",
              "\n",
              "                                              Descrição  \\\n",
              "0                                      Queda de ligação   \n",
              "1                                      Queda de ligação   \n",
              "2                                      Queda de ligação   \n",
              "3     Ligação muda (entrou muda no início do atendim...   \n",
              "4                                      Queda de ligação   \n",
              "...                                                 ...   \n",
              "1966                                   Queda de ligação   \n",
              "1967                                   Queda de ligação   \n",
              "1968                                   Queda de ligação   \n",
              "1969                                   Queda de ligação   \n",
              "1970                                   Queda de ligação   \n",
              "\n",
              "                                           Desc-tratado  \\\n",
              "0     Ligações que tiveram queda (durante ou na fina...   \n",
              "1     Ligações que tiveram queda (durante ou na fina...   \n",
              "2     Ligações que tiveram queda (durante ou na fina...   \n",
              "3     Falha nas ligações que ocorreram durante o ate...   \n",
              "4     Ligações que tiveram queda (durante ou na fina...   \n",
              "...                                                 ...   \n",
              "1966  Ligações que tiveram queda (durante ou na fina...   \n",
              "1967  Ligações que tiveram queda (durante ou na fina...   \n",
              "1968  Ligações que tiveram queda (durante ou na fina...   \n",
              "1969  Ligações que tiveram queda (durante ou na fina...   \n",
              "1970  Ligações que tiveram queda (durante ou na fina...   \n",
              "\n",
              "                   Dados-segmentados  \n",
              "0     Não se aplicam as segmentações  \n",
              "1     Não se aplicam as segmentações  \n",
              "2     Não se aplicam as segmentações  \n",
              "3     Não se aplicam as segmentações  \n",
              "4     Não se aplicam as segmentações  \n",
              "...                              ...  \n",
              "1966  Não se aplicam as segmentações  \n",
              "1967  Não se aplicam as segmentações  \n",
              "1968  Não se aplicam as segmentações  \n",
              "1969  Não se aplicam as segmentações  \n",
              "1970  Não se aplicam as segmentações  \n",
              "\n",
              "[1971 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-70aeca04-a59d-49d6-92cb-e8dcea64a807\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Problema</th>\n",
              "      <th>Mês</th>\n",
              "      <th>Colaborador</th>\n",
              "      <th>Colaborador-nome-ajustado</th>\n",
              "      <th>Equipe</th>\n",
              "      <th>Descrição</th>\n",
              "      <th>Desc-tratado</th>\n",
              "      <th>Dados-segmentados</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>2023-08-02</td>\n",
              "      <td>agosto</td>\n",
              "      <td>Vivian Teixeira de Oliveira</td>\n",
              "      <td>Vivian Teixeira de Oliveira</td>\n",
              "      <td>Carmem Lapa - Plantao Noturno</td>\n",
              "      <td>Queda de ligação</td>\n",
              "      <td>Ligações que tiveram queda (durante ou na fina...</td>\n",
              "      <td>Não se aplicam as segmentações</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>2023-08-02</td>\n",
              "      <td>agosto</td>\n",
              "      <td>Vivian Teixeira de Oliveira</td>\n",
              "      <td>Vivian Teixeira de Oliveira</td>\n",
              "      <td>Carmem Lapa - Plantao Noturno</td>\n",
              "      <td>Queda de ligação</td>\n",
              "      <td>Ligações que tiveram queda (durante ou na fina...</td>\n",
              "      <td>Não se aplicam as segmentações</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>2023-08-02</td>\n",
              "      <td>agosto</td>\n",
              "      <td>Vivian Teixeira de Oliveira</td>\n",
              "      <td>Vivian Teixeira de Oliveira</td>\n",
              "      <td>Carmem Lapa - Plantao Noturno</td>\n",
              "      <td>Queda de ligação</td>\n",
              "      <td>Ligações que tiveram queda (durante ou na fina...</td>\n",
              "      <td>Não se aplicam as segmentações</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>2023-08-02</td>\n",
              "      <td>agosto</td>\n",
              "      <td>ALENE XAVIER DOS SANTOS</td>\n",
              "      <td>ALENE XAVIER DOS SANTOS</td>\n",
              "      <td>Natalia Lima- SAS/ Allianz</td>\n",
              "      <td>Ligação muda (entrou muda no início do atendim...</td>\n",
              "      <td>Falha nas ligações que ocorreram durante o ate...</td>\n",
              "      <td>Não se aplicam as segmentações</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>2023-08-02</td>\n",
              "      <td>agosto</td>\n",
              "      <td>ALENE XAVIER DOS SANTOS</td>\n",
              "      <td>ALENE XAVIER DOS SANTOS</td>\n",
              "      <td>Natalia Lima- SAS/ Allianz</td>\n",
              "      <td>Queda de ligação</td>\n",
              "      <td>Ligações que tiveram queda (durante ou na fina...</td>\n",
              "      <td>Não se aplicam as segmentações</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1966</th>\n",
              "      <td>1966</td>\n",
              "      <td>2023-08-23</td>\n",
              "      <td>agosto</td>\n",
              "      <td>JAMILA LAYZA BATISTA SILVA</td>\n",
              "      <td>JAMILA LAYZA BATISTA SILVA</td>\n",
              "      <td>Anne Santos - BB/Mapfre</td>\n",
              "      <td>Queda de ligação</td>\n",
              "      <td>Ligações que tiveram queda (durante ou na fina...</td>\n",
              "      <td>Não se aplicam as segmentações</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1967</th>\n",
              "      <td>1967</td>\n",
              "      <td>2023-08-23</td>\n",
              "      <td>agosto</td>\n",
              "      <td>JAMILA LAYZA BATISTA SILVA</td>\n",
              "      <td>JAMILA LAYZA BATISTA SILVA</td>\n",
              "      <td>Anne Santos - BB/Mapfre</td>\n",
              "      <td>Queda de ligação</td>\n",
              "      <td>Ligações que tiveram queda (durante ou na fina...</td>\n",
              "      <td>Não se aplicam as segmentações</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1968</th>\n",
              "      <td>1968</td>\n",
              "      <td>2023-08-23</td>\n",
              "      <td>agosto</td>\n",
              "      <td>RAYXA KHELLY UCELI NEVES</td>\n",
              "      <td>RAYXA KHELLY UCELI NEVES</td>\n",
              "      <td>Anne Santos - BB/Mapfre</td>\n",
              "      <td>Queda de ligação</td>\n",
              "      <td>Ligações que tiveram queda (durante ou na fina...</td>\n",
              "      <td>Não se aplicam as segmentações</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1969</th>\n",
              "      <td>1969</td>\n",
              "      <td>2023-08-23</td>\n",
              "      <td>agosto</td>\n",
              "      <td>JHENIFER GABRIELA DOS SANTOS DAMACENO</td>\n",
              "      <td>JHENIFER GABRIELA DOS SANTOS DAMACENO</td>\n",
              "      <td>Anne Santos - BB/Mapfre</td>\n",
              "      <td>Queda de ligação</td>\n",
              "      <td>Ligações que tiveram queda (durante ou na fina...</td>\n",
              "      <td>Não se aplicam as segmentações</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1970</th>\n",
              "      <td>1970</td>\n",
              "      <td>2023-08-23</td>\n",
              "      <td>agosto</td>\n",
              "      <td>LAIS SILVA COSTA</td>\n",
              "      <td>LAIS SILVA COSTA</td>\n",
              "      <td>Anne Santos - BB/Mapfre</td>\n",
              "      <td>Queda de ligação</td>\n",
              "      <td>Ligações que tiveram queda (durante ou na fina...</td>\n",
              "      <td>Não se aplicam as segmentações</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1971 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-70aeca04-a59d-49d6-92cb-e8dcea64a807')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-70aeca04-a59d-49d6-92cb-e8dcea64a807 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-70aeca04-a59d-49d6-92cb-e8dcea64a807');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a5c6709b-bb70-44a1-a6ff-077532626102\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a5c6709b-bb70-44a1-a6ff-077532626102')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a5c6709b-bb70-44a1-a6ff-077532626102 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.to_excel('Tratados.xlsx')"
      ],
      "metadata": {
        "id": "VA9gl3TYPn7x"
      },
      "execution_count": 27,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "name": "Olá, este é o Colaboratory",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
